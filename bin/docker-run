#!/usr/bin/env bash

set -e

if [ -z "$OPENAI_API_KEY" ]; then
    echo "Error: OPENAI_API_KEY environment variable is not set"
    echo "Please export OPENAI_API_KEY=<your-api-key>"
    exit 1
fi

# Default values
SIMULATION_NAME="gift_choice"
IMAGE_TAG="latest"
HOST_PORT=""
REDIS_HOST="${REDIS_HOST:-host.docker.internal}"
REDIS_PORT="${REDIS_PORT:-6379}"
DAEMON_MODE=""
DOCKER_NETWORK="autobox-network"  # Default to autobox-network for Redis connectivity

while [[ $# -gt 0 ]]; do
    case $1 in
        --simulation-name|-s)
            SIMULATION_NAME="$2"
            shift 2
            ;;
        --daemon|-d)
            DAEMON_MODE="--daemon"
            shift
            ;;
        --tag|-t)
            IMAGE_TAG="$2"
            shift 2
            ;;
        --host-port|-p)
            HOST_PORT="$2"
            shift 2
            ;;
        --redis-host)
            REDIS_HOST="$2"
            shift 2
            ;;
        --redis-port)
            REDIS_PORT="$2"
            shift 2
            ;;
        --network|-n)
            DOCKER_NETWORK="$2"
            shift 2
            ;;
        --help|-h)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  -s, --simulation-name NAME  Simulation name (default: summer_vacation)"
            echo "  -d, --daemon               Keep server alive after simulation (default: false)"
            echo "  -t, --tag TAG              Docker image tag (default: latest)"
            echo "  -p, --host-port PORT       Host port to bind (default: auto-detect from server.json)"
            echo "  --redis-host HOST          Redis host (default: host.docker.internal, or 'redis' if using --network)"
            echo "  --redis-port PORT          Redis port (default: 6379)"
            echo "  -n, --network NAME         Docker network to join (default: autobox-network)"
            echo "  -h, --help                 Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

SERVER_CONFIG="examples/server/server.json"
SERVER_PORT=$(grep -o '"port":[[:space:]]*[0-9]*' "$SERVER_CONFIG" | grep -o '[0-9]*$')
if [ -z "$SERVER_PORT" ]; then
    echo "Warning: Could not determine port from server config, using default 9000"
    SERVER_PORT=9000
fi

find_free_port() {
    local start_port=$1
    local port=$start_port
    local max_attempts=100
    local attempt=0

    # Works on both macOS and Linux
    while [ $attempt -lt $max_attempts ]; do
        if ! nc -z localhost "$port" 2>/dev/null; then
            echo "$port"
            return 0
        fi
        port=$((port + 1))
        attempt=$((attempt + 1))
    done

    echo 0
    return 1
}

# Auto-detect free port if not specified
if [ -z "$HOST_PORT" ]; then
    HOST_PORT=$(find_free_port "$SERVER_PORT")
    if [ "$HOST_PORT" = "0" ]; then
        echo "Warning: Could not find a free port in range $SERVER_PORT-$((SERVER_PORT + 100))"
        echo "Docker will assign a random available port"
        HOST_PORT=""
    elif [ "$HOST_PORT" != "$SERVER_PORT" ]; then
        echo "Note: Port $SERVER_PORT is in use, using port $HOST_PORT on host instead"
    fi
fi

echo "Running autobox-engine container..."
echo "Simulation: $SIMULATION_NAME"
echo "Server port: $SERVER_PORT"
echo "Redis: $REDIS_HOST:$REDIS_PORT"
if [ -n "$DAEMON_MODE" ]; then
    echo "Mode: DAEMON (server stays alive after simulation)"
fi
if [ -n "$HOST_PORT" ]; then
    echo "Host port: $HOST_PORT -> Container port: $SERVER_PORT"
else
    echo "Host port: Docker will assign a random available port"
fi

if [ -n "$HOST_PORT" ]; then
    PORT_ARGS=(-p "$HOST_PORT:$SERVER_PORT")
else
    PORT_ARGS=(-P)
fi

# If network is specified, ensure it exists and setup Redis
if [ -n "$DOCKER_NETWORK" ]; then
    # Create network if it doesn't exist
    if ! docker network inspect "$DOCKER_NETWORK" &>/dev/null; then
        echo "Creating Docker network: $DOCKER_NETWORK"
        docker network create "$DOCKER_NETWORK"
    fi

    # Check if Redis container exists and is running on this network
    if ! docker ps --format '{{.Names}}' | grep -q "^autobox-redis$"; then
        # Check if Redis container exists but is stopped
        if docker ps -a --format '{{.Names}}' | grep -q "^autobox-redis$"; then
            echo "Starting existing Redis container..."
            docker start autobox-redis
            # Connect to network if not already connected
            docker network connect "$DOCKER_NETWORK" autobox-redis 2>/dev/null || true
        else
            echo "Starting Redis container on network: $DOCKER_NETWORK"
            docker run -d \
                --name autobox-redis \
                --network "$DOCKER_NETWORK" \
                -p 6379:6379 \
                redis:alpine
        fi
    else
        # Redis is running, ensure it's on the network
        docker network connect "$DOCKER_NETWORK" autobox-redis 2>/dev/null || true
    fi

    # Always wait for Redis to be ready
    echo "Waiting for Redis to be ready..."
    for i in {1..30}; do
        if docker exec autobox-redis redis-cli ping &>/dev/null; then
            echo "Redis is ready!"
            break
        fi
        sleep 1
    done

    # Get Redis container IP for explicit host mapping (bypasses DNS)
    REDIS_IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' autobox-redis)
    if [ -z "$REDIS_IP" ]; then
        echo "Error: Could not get Redis container IP"
        exit 1
    fi
    echo "Redis IP: $REDIS_IP"

    # Use 'redis' as hostname when on network
    if [ "$REDIS_HOST" = "host.docker.internal" ]; then
        REDIS_HOST="redis"
    fi
    echo "Network: $DOCKER_NETWORK (Redis hostname: $REDIS_HOST -> $REDIS_IP)"

    # Use explicit host mapping to bypass DNS
    NETWORK_ARGS=(--network "$DOCKER_NETWORK" --add-host "redis:$REDIS_IP")
else
    NETWORK_ARGS=()
fi

docker run \
    --rm \
    -it \
    "${PORT_ARGS[@]}" \
    "${NETWORK_ARGS[@]}" \
    -e OPENAI_API_KEY="$OPENAI_API_KEY" \
    -e REDIS_HOST="$REDIS_HOST" \
    -e REDIS_PORT="$REDIS_PORT" \
    -e PORT="$SERVER_PORT" \
    -e NODE_ENV=production \
    -e JWT_SECRET="${JWT_SECRET:-autobox-default-secret}" \
    -e JWT_EXPIRES_IN="${JWT_EXPIRES_IN:-7d}" \
    -v "$(pwd)/examples/simulations:/app/examples/simulations:ro" \
    -v "$(pwd)/examples/metrics:/app/examples/metrics:ro" \
    -v "$(pwd)/examples/server:/app/examples/server:ro" \
    -v "$(pwd)/logs:/app/logs" \
    "autobox-engine:${IMAGE_TAG}" \
    --config=/app/examples \
    --simulation-name="$SIMULATION_NAME" \
    $DAEMON_MODE
